
//! Autogenerated weights for pallet_account_abstraction
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-15, STEPS: `50`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
//    ./target/release/node-template
//    benchmark
//    pallet
//    --pallet=pallet_account_abstraction
//    --extrinsic=*
//    --chain=dev
//    --steps=50
//    --repeat=50
//    --no-storage-info
//    --no-median-slopes
//    --no-min-squares
//    --wasm-execution=compiled
//    --heap-pages=4096
//    --output=./pallets/account_abstraction/src/weights.rs
//    --template=./pallet-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_account_abstraction.
pub trait WeightInfo {
    fn remote_call_from_evm_chain() -> Weight;
}

/// Weights for pallet_account_abstraction using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: `TransactionPayment::NextFeeMultiplier` (r:1 w:0)
    /// Proof: `TransactionPayment::NextFeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    fn remote_call_from_evm_chain() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `170`
        //   Estimated: `3593`
        // Minimum execution time: 519_000_000 picoseconds.
        Weight::from_parts(534_000_000, 3593)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests.
impl WeightInfo for () {
    /// Storage: `TransactionPayment::NextFeeMultiplier` (r:1 w:0)
    /// Proof: `TransactionPayment::NextFeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    fn remote_call_from_evm_chain() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `170`
        //   Estimated: `3593`
        // Minimum execution time: 519_000_000 picoseconds.
        Weight::from_parts(534_000_000, 3593)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}
